name: Handle release process

# This workflow automates the release process.
# Only safe to use if the following conditions are met:
# 1. `main` is protected and requires a PR to merge.
# 2. Only squash-merging is allowed.
# 3. PRs are required to be up-to-date with `main` before merging.
# 4. Everyone is forbidden from creating releases manually.

on:
  # Case 1: manual trigger -> initiate release process
  workflow_dispatch:

  push:
    branches:
      # Case 2: release PR is being updated -> update changelog
      - 'bot/release/*'
      # Case 3: release PR is merged -> create a new release
      - main

env:
  GH_TOKEN: ${{ secrets.PL_PASTEURBOT_PAT_PUBLIC }}

jobs:
  trigger-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PL_PASTEURBOT_PAT_PUBLIC }}
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version-file: "pyproject.toml"

      - name: Install git-cliff
        run: |
          pip install git-cliff

      - name: Generate changelog
        id: generate_changelog
        run: |
          git-cliff --output CHANGELOG.md --bump
          new_version=$(git-cliff --bumped-version)
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Trigger release PR
        run: |
          git config --global user.name "PasteurBot"
          git config --global user.email "hello@simulation.science"

          git checkout -b "bot/release/${{ steps.generate_changelog.outputs.new_version }}"
          git add CHANGELOG.md
          git commit -m "chore: update changelog"

          pr_body=$(cat <<EOF
          This PR contains the generated changelog for the release ${{ steps.generate_changelog.outputs.new_version }}.

          ⚠️ **Merging this PR will immediately trigger a new release**. ⚠️

          To specify additional release notes, please edit this comment after the following line.

          ---
          EOF
          )

          gh pr create \
            --title "chore: release ${{ steps.generate_changelog.outputs.new_version }}" \
            --body "$pr_body" \
            --head "bot/release/${{ steps.generate_changelog.outputs.new_version }}" \
            --base "main"

  update-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/bot/release/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PL_PASTEURBOT_PAT_PUBLIC }}
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version-file: "pyproject.toml"

      - name: Install git-cliff
        run: |
          pip install git-cliff

      - name: Generate changelog
        id: generate_changelog
        run: |
          git-cliff --output CHANGELOG.md --bump
          new_version=$(git-cliff --bumped-version)
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update PR with changelog
        run: |
          git config --global user.name "PasteurBot"
          git config --global user.email "hello@simulation.science"

          git add CHANGELOG.md

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update changelog before release"
            git push origin HEAD:${{ github.ref }}
          fi

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PL_PASTEURBOT_PAT_PUBLIC }}
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version-file: "pyproject.toml"

      - name: Install git-cliff
        run: |
          pip install git-cliff

      - name: Get new version
        id: get_version
        run: |
          new_version=$(git-cliff --bumped-version)
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Assemble release notes
        id: release_notes
        run: |
          changelog=$(git cliff --bump --latest --strip all)

          custom_notes="${{ github.event.head_commit.message }}"
          custom_notes=$(echo "$custom_notes" | awk '/^---$/,/^---$/ {next} {print}')

          touch /tmp/notes.md
          echo "# Release Notes for v${{ steps.get_version.outputs.new_version }}" > /tmp/notes.md
          printf "%s\n\n" "$custom_notes" >> /tmp/notes.md
          printf "## Changelog\n\n%s\n" "$changelog" >> /tmp/notes.md
          echo "release_note_file=/tmp/notes.md" >> $GITHUB_OUTPUT

      - name: Create new release
        run: |
          gh release create "v${{ steps.get_version.outputs.new_version }}" \
            --title "v${{ steps.get_version.outputs.new_version }}" \
            --notes-file "${{ steps.release_notes.outputs.release_note_file }}" \
            --draft \
            --target ${{ github.sha }} \
            --latest
